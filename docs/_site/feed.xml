<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FROYO</title>
    <description>A simple blog about various experiments in C++, Typescript, Rendering.
</description>
    <link>https://froyo-np.github.io/</link>
    <atom:link href="https://froyo-np.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 29 Apr 2022 14:30:05 -0700</pubDate>
    <lastBuildDate>Fri, 29 Apr 2022 14:30:05 -0700</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Rendering Signed distance functions, C++20 modules, no virtual stuff</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/images/sdf_header.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;hello-signed-distance-functions&quot;&gt;Hello Signed Distance Functions&lt;/h1&gt;

&lt;p&gt;As mentioned in the previous post, I’ve implemented a little SDF (signed distance field) shape rendering library using some new(er) features of c++20. I’m gonna walk through some of the decisions I made for this one, as there are a lot of decisions I made along the way that were a bit outside of my comfort zone.&lt;/p&gt;

&lt;h2 id=&quot;sdf-refresher&quot;&gt;SDF refresher&lt;/h2&gt;
&lt;p&gt;We have shapes, which define a simple math function that reports either the distance to a surface, or a bound on that distance. To render this, we march along rays from the camera origin until we hit a surface - a hit exists where SDF(shape, testPointOnRay) is near 0. 
These shapes can be combined via intersection, subtraction, and simple union. they can also be modified by operations like smoothing or various transforms. A composite SDF object could be described by a tree, eg. BinaryOp(intersection, round(box(…), cone(…)).
So! the overall structure of this little experiment is to produce a tree structure that supports combining these elements, and traversing them to determine the distance from a test point in 3D space to the surface of the compound object.
I’ve written (and so have you, probably) recursive tree data structures before:
template &lt;typename T=&quot;&quot;&gt;
class treeNode {
	T item;
	vector&amp;lt;treeNode&lt;T&gt;&amp;gt; children;
};&lt;/T&gt;&lt;/typename&gt;&lt;/p&gt;

&lt;p&gt;// the items then would be our SDF shapes / binary ops, something like this:
class AbstractSdfShape {
	virtual float distanceTo(vec&amp;lt;float,3&amp;gt;&amp;amp; pnt)=0;
	//… more virtual methods, depending on what we want to do.
};
This is a pretty straightforward approach, with some benefits and some downsides.
on first glance, its short, and you can use a pointer to a base class as T to get runtime polymorphism for the items at hand. As a downside however, its easy to create a tree in which you could have a binary op (lets say - subtract) with more or less than 2 children, which to me seems ill-formed. also, all your polymorphism is done via a virtual interface, which I’m not opposed to in general, (and compilers now de-virtualize things?) but still I’d like to try an approach with some other goals in mind:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I’d prefer to not have to alter the interface of the SDF shapes to add new functionality.&lt;/li&gt;
  &lt;li&gt;runtime polymorphism is a must, however I’d like to try to avoid virtual interfaces, purely as an exercise in exploring alternatives.&lt;/li&gt;
  &lt;li&gt;I’d like this to be fairly easy to add both new functionality, and new shapes / sdf operations.&lt;/li&gt;
  &lt;li&gt;I’d like it to be impossible (compile time error) to produce ill-formed trees, but also it seems important to me to keep the math-y parts somewhat separate from the tree parts…&lt;/li&gt;
  &lt;li&gt;I’d like the code to be fairly compact.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With those goals in mind - I’ve gone with std::variant as my pointer-to-base-class alternative. How does it work? well it works a lot like the V-table in a virtual class, except its not built into the language. There are reports that as a result, it can be a bit slow, depending on how many potential values are stored in the variant.
With all the above in mind, lets take a look at what I actually created. All the code is on github, and before we dive in, I’ll explain some other choices I made:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;C++20 modules! This is one of my favorite new features of c++, so of course I had to try it out. As far as I can tell, its working great!&lt;/li&gt;
  &lt;li&gt;Visual Studio 2022 &amp;amp; Windows 10 - yup, this is my comfort zone. I’ve made a very sloppy OpenGL Win32 app, purely as a playground for these ideas. I should mention also that VS2022 has really great support for C++20.&lt;/li&gt;
  &lt;li&gt;Im using my own immutable vec3 library as a submodule, as well as the brilliant IMGUI.
Ok sidebar over, on to the code!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-sdf--math-part&quot;&gt;The SDF / Math part&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// SDFBOX.IXX

module;
// we use macros in .ixx modules to privately conjoin some compile-time strings
// anything included or #defined between &#39;module&#39; and &#39;export module sdfBox&#39;
// will not leak to our importers!
#define UI_NAME &quot;box&quot;
#include &quot;guiDef.h&quot;
#include &amp;lt;string&amp;gt;
#define SNAME UI_NAME
#define SDEF &quot;struct &quot; SNAME &quot; {vec3 dim;};&quot;
#define FNAME &quot;sdfBox&quot;
#define FNBODY R&quot;(
	vec3 d = abs(p)-self.dim;
	vec3 z = vec3(0,0,0);
	vec3 m = min(d,z);
	return length(max(d,z)) + max(m.x,max(m.y,m.z));)&quot;
#define FNDEF decl_glslFunc(FNAME,SNAME,FNBODY);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So the first the we can see is a bunch of old-school preprocessor stuff in the global module fragment of our file, which is a module file. stuff here wont leak to our importers, which is nice! This section above includes a .h file full of macros, as well as some conjoined strings which form a little GLSL snippet that would evaluate this SDF of a box in that language.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export module sdfBox;
import imvec;
import string_helpers;
export namespace SDF {
		using namespace ivec;
		template &amp;lt;typename F&amp;gt;
		struct box {
			ivec::vec&amp;lt;F, 3&amp;gt; dim;
			box() : dim(vec&amp;lt;F, 3&amp;gt;(1, 1, 1)) {}
			box(vec&amp;lt;F, 3&amp;gt; size) : dim(size) {}
			
		};
		template &amp;lt;typename F&amp;gt;
		F distanceTo(const box&amp;lt;F&amp;gt;&amp;amp; self, const vec&amp;lt;F, 3&amp;gt;&amp;amp; p) {
			vec&amp;lt;F, 3&amp;gt; d = p.abs() - self.dim;
			vec&amp;lt;F, 3&amp;gt; z(0, 0, 0);
			return d.max(z).length() + d.min(z).maxComponent();
		}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above section exports a very simple &lt;code&gt;struct box&lt;/code&gt;, which is defined by its size in X, Y, and Z. After that is a free function distanceTo which evaluates the signed distance between its first argument (a box) and a test point &lt;code&gt;p&lt;/code&gt;. very straightforward! All SDF shapes must have a distanceTo function defined for them, with a similar signature. C++ will then very helpfully figure out which one to call via overload resolution - a brilliant form of static polymorphism.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		decl_uiName(box, UI_NAME)
		decl_glslInterface(box, SNAME, SDEF, FNAME, FNDEF)
		export template &amp;lt;typename F&amp;gt;
			std::string glslLiteral(const box&amp;lt;F&amp;gt;&amp;amp; self) {
			return std::string(SNAME) + &quot;(&quot; + vecLiteral&amp;lt;F, 3&amp;gt;(self.dim) + &quot;)&quot;;
		}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The final section above declares some more free functions, which support other parts of the interface - specifically a function which just return the UI name of this type “box” and the GLSL interface, which is used when we traverse a tree of these objects to generate a GLSL shader that would render that object. I find it nice that the GLSL definition is right next to the C++ equivalent, but of course these could be defined anywhere that makes you happy. Do note that &lt;code&gt;decl_uiName()&lt;/code&gt; and &lt;code&gt;decl_glslInterface()&lt;/code&gt; are macros defined in guiDef.h, and they hide the boilerplate of these repetitive free functions without polluting the global namespace. Lastly, &lt;code&gt;glslLiteral()&lt;/code&gt; returns a non-compile-time string that would construct a box with a literal vec3 in GLSL.&lt;/p&gt;

&lt;p&gt;box.ixx is of course a module that defines the signed distance function to a box in 3D - lets take a look at a different SDF class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// UNION.IXX
module;
#include &amp;lt;string&amp;gt;

#define max(a,b) a &amp;gt; b ? a : b
#define min(a,b) a &amp;lt; b ? a : b
#include &quot;guiDef.h&quot;

// &quot;empty&quot; is a magic word that lets our shader-builder visitor know its
// safe to omit this parameter from the generated GLSL function &#39;sdfUnion&#39;
#define sName &quot;empty&quot;
#define sDef &quot;&quot;
#define fnName &quot;sdfUnion&quot;
#define fnDef &quot;float &quot; fnName &quot;(float a, float b) { return min(a, b); }&quot;

export module sdfUnion;
import imvec;
import string_helpers;
export namespace SDF {
	// &#39;union&#39; is of course a keyword - blerg
	template &amp;lt;typename F&amp;gt;
	struct union_sdf {
		// intentionally empty!
	};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Union is the simplest binary SDF operator - simply returning the minimum distance between its two arguments. Like sdfBox, we must have a &lt;code&gt;struct union_sdf&lt;/code&gt; even though its empty! this is because we’re relying on overload resolution to figure out what binary op to call! &lt;code&gt;sdfBinaryOp&lt;/code&gt; is the meat here - we could have called it distanceTo, but it felt nicer to differentiate between shapes and binary operations on shapes with a name, even though they have a different signature.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	template &amp;lt;typename F&amp;gt;
	inline F sdfBinaryOp(const union_sdf&amp;lt;F&amp;gt;&amp;amp; i, F a, F b) {
		return min(a, b);
	}
	decl_uiName(union_sdf, &quot;union&quot;);
	decl_glslInterface(union_sdf, sName, sDef, fnName, fnDef)
	
	export template &amp;lt;typename F&amp;gt;
	std::string glslLiteral(const union_sdf&amp;lt;F&amp;gt;&amp;amp; self) {
		return std::string(&quot;&quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-tree-part&quot;&gt;The Tree part&lt;/h2&gt;
&lt;p&gt;So We’ve seen two classes SDF functionality - a simple shape and the simplest binary operator. They all have an interface made of free functions, and our method of polymorphism is function overload resolution. We’re going to combine them using trees (for an example a binOp like union would have two children, while a shape like box must have none). There are at least 4 classes of these SDF operations, and it is a goal to allow a user of this library to add more with little effort:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Shapes like box, torus, sphere, etc.&lt;/li&gt;
  &lt;li&gt;binary operators (union, intersection, subtraction)&lt;/li&gt;
  &lt;li&gt;unary operators like round, shell, etc.&lt;/li&gt;
  &lt;li&gt;domain operators, like translate, rotate, repeat, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of the above classes has a distance function with a slightly different signature:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Shapes: F distanceTo(shape, point)&lt;/li&gt;
  &lt;li&gt;binary operators: F sdfBinaryOp(operatorData, dstA, dstB) //sometimes operator data is empty&lt;/li&gt;
  &lt;li&gt;unary operators: F sdfUnaryOp(operatorData, dstA)&lt;/li&gt;
  &lt;li&gt;domain operators: vec&amp;lt;F,3&amp;gt; transformDomain(operatorData, point P)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of these signatures returns a distance, except for the domain operators, which fiddle with the test point. We can see also from this that we will need two layers of polymorphism - one abstracting the 4 classes above, and one for each of the 4 classes, each abstracting the different, specific shapes or operators in that class. In classic form, it might look like so: &lt;br /&gt;
&lt;code&gt;
class INode {
    //tree stuff
};&lt;br /&gt;
class IShapeNode: public INode {
    virtual distanceTo(...)=0;
};&lt;br /&gt;
class IDomainNode: public INode  {
    virtual transformDomain(...)=0;
};&lt;br /&gt;
class IBinaryNode: public INode  {
    virtual sdfBinaryOp(...)=0;
};&lt;br /&gt;
class IUnaryNode: public INode  {
    virtual sdfUnaryOp(...)=0;
};
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However as allready states, we’ll be givving &lt;code&gt;std::variant&lt;/code&gt; a spin! Hang on because this is where it gets confusing!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// SDFNODE.IXX
#include &amp;lt;variant&amp;gt;

export template &amp;lt;class... nodeVariants&amp;gt;
	class StructuredTree {
	protected:
		explicit StructuredTree() = delete;	// non-constructable class...
	public:
		using NodeVariant = std::variant&amp;lt;nodeVariants...&amp;gt;;
		
	};
	export template &amp;lt;class Var&amp;gt;
	class Node {
	protected:
		Var payload;
		template &amp;lt;typename V&amp;gt; // todo require V to be assignable to Var
		Node(V&amp;amp;&amp;amp; v) : payload(std::move(v)) {}
		
	public:
		inline Var getPayload() const { return payload; }
		inline void setPayload(Var p) { payload = p; }
		//~Node() = default;
	};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ok, we’ve got a template parameter pack… and a Node class that is just a wrapper for its payload of type Var.
Whats going on here? The template parameter pack is just immediately fed to a type alias &lt;code&gt;using NodeVariant = std::variant&lt;nodeVariants...&gt;;&amp;lt;/code&amp;gt;&lt;/nodeVariants...&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export template &amp;lt;class P, class GroupType&amp;gt;
	class BinOp : public Node&amp;lt;P&amp;gt; {
		protected:
			std::vector&amp;lt;typename GroupType::NodeVariant&amp;gt; children;
		public:
			// getters, etc... missing for brevity
			
	};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ok here we can start to see whats going on - because this is a recursive type, we need a symbol to define the type of any possible node, which is tricky because we’re currently in the middle of defining a class of BinaryOp, and we haven’t even seen the others yet, nor forward declared them. We solve this by the template parameter GroupType, which is a stand-in for StructuredTree (you can see we refer to its sub-type here): &lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;typename GroupType::NodeVariant&amp;gt; children;&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;However StructuredTree is itself templated, and its template argument pack must be the list of all the classes of SDF nodes! This somewhat circular template :sparkles: is often referred to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern&quot;&gt;CRTP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another point of note is the use of std::vector for storing children tree-nodes. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupType::NodeVariant&lt;/code&gt; is incomplete, we need a container that can handle that - we could have also used a smart pointer - it really isn’t important, and we could of course change it at any time. Lets proceed to Unary ops, Domain Ops, and Shape (leaf) nodes:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	export template &amp;lt;class P, class GroupType&amp;gt;
	class UnOp : public Node&amp;lt;P&amp;gt; {
		protected:
			std::vector&amp;lt;typename GroupType::NodeVariant&amp;gt; child;
		public:
			template &amp;lt;typename V&amp;gt;
			explicit UnOp(V&amp;amp;&amp;amp; v, typename GroupType::NodeVariant&amp;amp;&amp;amp; subTree) : Node&amp;lt;P&amp;gt;(std::move(v)), child({ subTree }) {}
			inline const typename GroupType::NodeVariant&amp;amp; getChild() const { return child[0]; }
			inline typename GroupType::NodeVariant&amp;amp; getChild() { return child[0]; }
			inline typename GroupType::NodeVariant&amp;amp;&amp;amp; takeChild() { return std::move(child[0]); }
			inline void setChild(typename GroupType::NodeVariant&amp;amp;&amp;amp; node) {
				child[0] = std::move(node);
			}
			
	};
	export template &amp;lt;class P, class GroupType&amp;gt;
	class DomOp : public Node&amp;lt;P&amp;gt; {
		protected:
			std::vector&amp;lt;typename GroupType::NodeVariant&amp;gt; child;
		public:
			template &amp;lt;typename V&amp;gt;
			explicit DomOp(V&amp;amp;&amp;amp; v, typename GroupType::NodeVariant&amp;amp;&amp;amp; subTree) : Node&amp;lt;P&amp;gt;(std::move(v)), child({ subTree }) {}
			inline const typename GroupType::NodeVariant&amp;amp; getChild() const { return child[0]; }
			inline typename GroupType::NodeVariant&amp;amp; getChild() { return child[0]; }
			inline typename GroupType::NodeVariant&amp;amp;&amp;amp; takeChild() { return std::move(child[0]); }
			inline void setChild(typename GroupType::NodeVariant&amp;amp;&amp;amp; node) {
				child[0] = std::move(node);
			}
			
	};
	export template &amp;lt;class P&amp;gt;
		class LeafOp : public Node&amp;lt;P&amp;gt; {
		protected:
		public:
			template &amp;lt;typename V&amp;gt;
			explicit LeafOp(V&amp;amp;&amp;amp; v) : Node&amp;lt;P&amp;gt;(std::move(v)) {}
			
	};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see above, the pattern is much the same - each of the classes of node type has storage for children (except for the leaves aka shapes) and all of them have a template placeholder for the type of any node, as well as a template for the possible payloads. We do extend Node as a way of storing the payload, but nothing is virtual.&lt;/p&gt;

&lt;p&gt;In the next section, we wrap everything up by extending StructuredTree&amp;lt;…&amp;gt; thereby fulfilling the GroupType we pretended would exist above. We also make ‘nice’ type aliases for our various classes so we can maybe type less in the future. We leave ourselves room for extensibility by not yet defining all the binop/unaryOp/shape payloads, and by leaving in a final …OtherNodeClasses placeholder, for further extensibility.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	export template &amp;lt;typename B, typename U, typename D, typename L, typename... OtherNodeClasses&amp;gt;
	class sdfTreeGroup : public StructuredTree&amp;lt;
		BinOp&amp;lt;B, sdfTreeGroup&amp;lt;B,U,D,L,OtherNodeClasses...&amp;gt;&amp;gt;,
		UnOp&amp;lt;U, sdfTreeGroup&amp;lt;B, U, D, L, OtherNodeClasses...&amp;gt;&amp;gt;, 
		DomOp&amp;lt;D, sdfTreeGroup&amp;lt;B, U, D, L, OtherNodeClasses...&amp;gt;&amp;gt;, 
		LeafOp&amp;lt;L&amp;gt;, 
		OtherNodeClasses...&amp;gt; {
		public:
			// variants of payload, per node-class
			using binVaraints = B;
			using unaryVariants = U;
			using domainVariants = D;
			using leafVariants = L;

			// node-classes
			using BinaryOp = BinOp&amp;lt;B, sdfTreeGroup&amp;lt;B, U, D, L, OtherNodeClasses...&amp;gt;&amp;gt;;
			using UnaryOp= UnOp&amp;lt;U, sdfTreeGroup&amp;lt;B, U, D, L, OtherNodeClasses...&amp;gt;&amp;gt;;
			using DomainOp = DomOp&amp;lt;D, sdfTreeGroup&amp;lt;B, U, D, L, OtherNodeClasses...&amp;gt;&amp;gt;;
			using Shape = LeafOp&amp;lt;L&amp;gt;;

	};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ok - the last part ties the generic stuff into an ‘implementation’ of this library:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template &amp;lt;typename F&amp;gt;
using binOpVariant = std::variant&amp;lt;union_sdf&amp;lt;F&amp;gt;, smoothUnion&amp;lt;F&amp;gt;, intersect&amp;lt;F&amp;gt;, smoothIntersect&amp;lt;F&amp;gt;, subtract&amp;lt;F&amp;gt;, smoothSubtract&amp;lt;F&amp;gt;&amp;gt;;


template &amp;lt;typename F&amp;gt;
using unaryOpVariant = std::variant&amp;lt;round&amp;lt;F&amp;gt;&amp;gt;;

template &amp;lt;typename F&amp;gt;
using domainOpVariant = std::variant&amp;lt;move&amp;lt;F&amp;gt;, repeat&amp;lt;F&amp;gt;&amp;gt;;

template &amp;lt;typename F&amp;gt;
using shapeVariant = std::variant&amp;lt;cone&amp;lt;F&amp;gt;, box&amp;lt;F&amp;gt;, torus&amp;lt;F&amp;gt;, sphere&amp;lt;F&amp;gt;,capsule&amp;lt;F&amp;gt;,hexPrism&amp;lt;F&amp;gt;,cylinder&amp;lt;F&amp;gt;&amp;gt;;

using sdfNode = sdfTreeGroup&amp;lt;binOpVariant&amp;lt;float&amp;gt;, unaryOpVariant&amp;lt;float&amp;gt;, domainOpVariant&amp;lt;float&amp;gt;, shapeVariant&amp;lt;float&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;SO - finally, we have the type of the tree - sdfNode! its got all the known payload types baked, in, and its pretty easy to add more!&lt;/p&gt;
&lt;h2 id=&quot;but-this-seems-very-confusing-why-did-we-do-this-again&quot;&gt;But… this seems very confusing! Why did we do this again?&lt;/h2&gt;
&lt;p&gt;Yes. I wont lie, this took me quite some time to write, and the error messages are not friendly! Its probably not more performant than a virtual interface, and that form will be much more familiar to many readers, which is no small benefit! What did we get for all this generic gibberish?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Its very loose coupling! The distance functions, the GLSL generation, all of it is free-function based! The tree stuff knows NOTHING of the math stuff, and vice-versa! This can make modification down the road very easy to isolate.&lt;/li&gt;
  &lt;li&gt;Compile errors - you will get them, but they can be quite unclear. I considered adding c++20 Concepts to the template parameters, however that did not improve the situation much - I dont think the VS2022 messages for these are finished baking.&lt;/li&gt;
  &lt;li&gt;Nothing is virtual - not a big win, and we still pay something for the runtime-polymorphism as we will see, but at least our objects pack well and there is minimal indirection.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-visitors&quot;&gt;The Visitors&lt;/h2&gt;
&lt;p&gt;Its hard to evalute this setup without looking at the actual use cases of these SDF trees. Because of the recursive stucture and decoupled interface, a visitor pattern makes clear sense. I’ve implemented a GUI visitor, which lets IMGui manipulate a tree, a GLSL shader generator visitor, and of course a distance visitor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;///DistanceVisitor.ixx
export template&amp;lt;typename F, typename GroupType&amp;gt;
	F visitDistance(const typename GroupType::BinaryOp&amp;amp; node, const ivec::vec&amp;lt;F, 3&amp;gt;&amp;amp; p) {
		// visit children first
		F a = visitDistance&amp;lt;F, GroupType&amp;gt;(node.getLhs(), p);
		F b = visitDistance&amp;lt;F, GroupType&amp;gt;(node.getRhs(), p);
		return std::visit(
			[a, b](const auto&amp;amp; arg) {return sdfBinaryOp&amp;lt;F&amp;gt;(arg, a, b); }, node.getPayload());
	}
	export template&amp;lt;typename F, typename GroupType&amp;gt;
	F visitDistance(const typename GroupType::Shape&amp;amp; node, const ivec::vec&amp;lt;F, 3&amp;gt;&amp;amp; p) {
		return std::visit( // deduces arg-type for every variant of shape payload
			[&amp;amp;p](const auto&amp;amp; arg) {return distanceTo&amp;lt;F&amp;gt;(arg, p); }, node.getPayload());
	}
	export template&amp;lt;typename F, typename GroupType&amp;gt;
		F visitDistance(const typename GroupType::UnaryOp&amp;amp; node, const ivec::vec&amp;lt;F, 3&amp;gt;&amp;amp; p) {
		F childDst = visitDistance&amp;lt;F,GroupType&amp;gt;(node.getChild(), p);
		return std::visit( // note that unary ops mess with their child&#39;s distance value
			[childDst](const auto&amp;amp; arg) {return sdfUnaryOp&amp;lt;F&amp;gt;(arg, childDst); }, node.getPayload());
	}
	export template&amp;lt;typename F, typename GroupType&amp;gt;
		F visitDistance(const typename GroupType::DomainOp&amp;amp; node, const ivec::vec&amp;lt;F, 3&amp;gt;&amp;amp; p) {
		ivec::vec&amp;lt;F, 3&amp;gt; pnt = std::visit( // wheras domain ops mess with the given test-point p
			[p](const auto&amp;amp; arg) {return sdfDomainOp&amp;lt;F&amp;gt;(arg, p); }, node.getPayload());
		return visitDistance&amp;lt;F, GroupType&amp;gt;(node.getChild(), pnt);
	}
	// IMPORTANT: DEFINERS OF VISITORS that use overload resolution
	// must have the most generic version defined last - (or of course just declare all of them first before defining any)
	export template&amp;lt;typename F, typename GroupType&amp;gt;
	F visitDistance(const typename GroupType::NodeVariant&amp;amp; node, const ivec::vec&amp;lt;F, 3&amp;gt;&amp;amp; p) {
		return std::visit( 
			[&amp;amp;p](const auto&amp;amp; arg) {return visitDistance&amp;lt;F, GroupType&amp;gt;(arg, p); }, node);
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thats it! Nice and brief! Lets pick it apart:
We’ve got a group of functions, which the compiler discriminates via overload resolution, one for the generic case and one for each of the 4 classes of node. At each point where we dont know which of the alternatives is held at runtime by an std::variant, we use std::visit() which always has just a single lambda with an auto-typed argument! this visit function is effectively taking the place of the v-table that would be in use in a virtual interface scenario - it internally associates keys with the alternatives types it could hold, and at runtime must evaluate that key to figure out the actual type. On the plus side, this is all hidden from us and we can just use a very pleasant auto lambda.&lt;/p&gt;

&lt;p&gt;This little pack of code lets us evaluate the distance from a point p to any compound SDF object represented by our tree. The GLSL shader generator visitor follows a similar, simple pattern. Rather than evaluate the distance functions, however, it instead collects strings that define the distance functions in GLSL, and composes a them into the GLSL code that would evaluate them. This snippet is then injected into a simple GLSL host that marches rays through the scene, and renders the results.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Although it was more than a little confusing to make, I think this approach achieved the goals. Although its non-conventional form is I think in conflict with the goal that loose coupling implies - that it be easily changed / maintained. It is is pretty flexible, once you get the hang of it, and it was fun to play around with some new ideas - intentionally keeping functions free, making good use of the power of templates, not to mention the novel (to me) method of rendering shapes via SDF! the technique has a lot of interesting benefits and drawbacks vs. your average array of indices and vertices!
One last thought this experiment left me with - I feel like c++20 modules revitalize the C++ preprocessor, rather than making it obsolete! It is with good reason that #defining all kinds of wild &lt;code class=&quot;highlighter-rouge&quot;&gt;__DANGER_SYMBOLS__&lt;/code&gt; is not in vogue these days, but by keeping them private in each module, I actually think its made them a much more viable option for code preprocessing!&lt;/p&gt;

&lt;p&gt;I’ll leave you with a short, underwhelming video of the app in action, and of course all the code is available in full on &lt;a href=&quot;https://github.com/froyo-np/steply&quot;&gt;github&lt;/a&gt;.&lt;br /&gt;
&lt;img src=&quot;/assets/images/viewer.gif&quot; alt=&quot;video of sdf viewer &amp;amp; editor&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2022 13:28:49 -0800</pubDate>
        <link>https://froyo-np.github.io/c++/2022/03/10/cpp_sdf.html</link>
        <guid isPermaLink="true">https://froyo-np.github.io/c++/2022/03/10/cpp_sdf.html</guid>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Lets make cool stuff with C++ part 1</title>
        <description>&lt;h1 id=&quot;hello-c&quot;&gt;Hello C++&lt;/h1&gt;
&lt;p&gt;I love C++ - but I’ve been away for a long while! C++20 is out and looking good, so Im going to be building some experimental things here in the coming posts. I am specifically interested in C++20 (particularly modules), WebAssembly, and graphics/rendering in general. So! I’m starting with a simple templated vector (as in GLSL, not std::vector) library that I’ve been toying around with &lt;a href=&quot;https://github.com/froyo-np/imvec&quot;&gt;here&lt;/a&gt;. Some things I like about it -&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Its immutable - unlike GLSL’s vectors.&lt;/li&gt;
  &lt;li&gt;Its pretty compact, but has handy template specializations like .xy(), overloaded math operators, etc.&lt;/li&gt;
  &lt;li&gt;Its probably not the fastest, but it feels pretty clean, and nothing is virtual, so it should pack well.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For now, its all in a .hpp file, but I’ll be experimenting with converting it to a c++20 module soon - this will have handy consequences like hiding all the gross macro’s I generated to do the exhaustive swizzle interface specializations.&lt;/p&gt;

&lt;p&gt;After that, I’m going to extend the experiment and simple SDF rendering library, again with templates &amp;amp; C++20 modules. SDF-style rendering is very cool, and pretty new to me. A &lt;em&gt;&lt;strong&gt;FANTASTIC&lt;/strong&gt;&lt;/em&gt; blog on the topic is &lt;a href=&quot;https://www.iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly - my ultimate goal is to get all that built for WebAssembly - I’ve experimented with this a bit via Clang, but so far all my C++20 module experiments seem to work, up until its time to actually generate an executable .wasm file…&lt;/p&gt;

&lt;p&gt;Anyhow, thanks for reading - stay tuned if the above interests you at all!&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2022 13:28:49 -0800</pubDate>
        <link>https://froyo-np.github.io/c++/2022/03/10/cpp_new_again.html</link>
        <guid isPermaLink="true">https://froyo-np.github.io/c++/2022/03/10/cpp_new_again.html</guid>
        
        
        <category>c++</category>
        
      </item>
    
  </channel>
</rss>
